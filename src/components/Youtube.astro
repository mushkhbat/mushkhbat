---
const {id} = Astro.props;
---
<>
<video id="player" style="padding: var(--space-l); max-width: 100%;" width="640" height="360">

</video>

<script defer is:inline data-id={id}>

     try {
                    // 2. This code loads the IFrame Player API code asynchronously.
            var tag = document.createElement('script');
            tag.defer = true;
            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            window.id_ = document.currentScript.dataset.id;
            // 3. This function creates an <iframe> (and YouTube player)
            //    after the API code downloads.
            window["player_"];
            function onYouTubeIframeAPIReady() {
            player_ = new YT.Player('player', {
                videoId: id_,
                playerVars: {
                'playsinline': 1
                }
            });
            }
        var lastTimeUpdate = 0;
            window.addEventListener("message", function(event) {
                if(player_.getIframe().contentWindow == event.source){
                    var data = JSON.parse(event.data);
                    if (
        data.event === "infoDelivery" &&
        data.info &&
        data.info.currentTime
      ) {
        var time = data.info.currentTime;

        if (time !== lastTimeUpdate) {
          lastTimeUpdate = time;
          
          // It's now up to you to format the time.
          console.log(toHHMMSS(time));
        }
      }
                }
            })
     } catch (error) {
        
     }

  var toHHMMSS = (secs) => {
    var sec_num = parseInt(secs, 10)
    var hours   = Math.floor(sec_num / 3600)
    var minutes = Math.floor(sec_num / 60) % 60
    var seconds = sec_num % 60

    return [hours,minutes,seconds]
        .map(v => v < 10 ? "0" + v : v)
        .filter((v,i) => v !== "00" || i > 0)
        .join(":")
}
      // 4. The API will call this function when the video player is ready.
</script>
</>